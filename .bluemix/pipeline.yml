---
stages:
- name: Test stage branch, deploy, and create PR
  inputs:
  - type: git
    branch: stage
    service: ${SAMPLE_REPO}
  triggers:
  - type: commit
  properties:
  - name: API_KEY
    type: text
    value: ${API_KEY}
  - name: PROD_ORG_NAME
    type: text
    value: ${PROD_ORG_NAME}
  - name: PROD_SPACE_NAME
    type: text
    value: ${PROD_SPACE_NAME}
  - name: PROD_REGION_ID
    type: text
    value: ${PROD_REGION_ID}
  - name: TEST_COMMAND
    type: text
    value: ${TEST_COMMAND}
  - name: TEST_SETUP_COMMAND
    type: text
    value: ${TEST_SETUP_COMMAND}
  - name: GH_API_KEY
    type: text
    value: ${GH_API_KEY}
  jobs:
  - name: Test
    type: tester
    curratedDockerImage: default
    script: |
      #!/bin/bash
      repo=${GIT_URLS#'https://github.com/'}
      repo=${repo/'.git'}

      function createPR () {
        if [ -v GH_API_KEY ]
        then
          user_name=$GH_USERNAME
          token=$GH_API_KEY
          curl -X POST -H "Content-Type: application/json" -H "Authorization: token $GH_API_KEY" -d \
          '{"title":"Merge Stage to Master", "body":"This PR was created by the Serverless Toolchain", "head":"stage", "base":"master"}' \
          https://api.github.com/repos/${repo}/pulls
        fi
      }

      function createIssue () {
        if [ -v GH_API_KEY ]
        then
          curl -X "POST" "https://api.github.com/repos/$repo/issues?state=all" \
          -H "Cookie: logged_in=no" \
          -H "Authorization: token ${GH_API_KEY}" \
          -H "Content-Type: text/plain; charset=utf-8" \
          -d $'{
          "title": "Serverless toolchain tests did not pass",
          "body": "Tests failed on Stage branch",
          }'
        fi
      }

      echo "Running tests"
      ${TEST_SETUP_COMMAND}
      ${TEST_COMMAND}
      if test $? -eq 0 
      then
        echo "Creating PR"
        createPR
      else
        echo "Tests failed"
        createIssue
        exit 1
      fi
    test_type: simple
  - name: Deploy to stage
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME}
      api_key: ${API_KEY}
    script: |
      #!/bin/bash
      echo "API_KEY=${API_KEY}"
      echo "PROD_ORG_NAME=${PROD_ORG_NAME}"
      echo "PROD_SPACE_NAME=${PROD_SPACE_NAME}"
      echo "PROD_REGION_ID=${PROD_REGION_ID}"
      region=$(cut -d ':' -f3 <<< "$PROD_REGION_ID")

      echo bx login -a https://cloud.ibm.com --apikey ${API_KEY} -r $region
      bx login -a https://cloud.ibm.com --apikey ${API_KEY} -r $region

      echo bx target -o ${PROD_ORG_NAME} -s ${PROD_SPACE_NAME}
      bx target -o ${PROD_ORG_NAME} -s ${PROD_SPACE_NAME}

      echo bx wsk action invoke /whisk.system/utils/echo -p message hello --blocking --result
      bx wsk action invoke /whisk.system/utils/echo -p message hello --blocking --result
      # now set up your actions etc
      for i in `find actions -type f \( -name "*.js" -or -name "*.py" \)` ; do
        file=`echo $i | cut -d "/" -f 2`
        type=`echo $file | cut -d "." -f 2`
        name=`echo $file | cut -d "." -f 1`
        if [ $type == "js" ] ; then
          kind="nodejs:10"
        else
          kind="python:3"
        fi
        bx wsk action update ${name}-stage --kind $kind $i
      done 
      # check everything is as expected
      bx wsk action list
- name: Deploy to master
  inputs:
  - type: git
    branch: master
    service: ${SAMPLE_REPO}
  triggers:
  - type: commit
  properties:
  - name: API_KEY
    type: text
    value: ${API_KEY}
  - name: PROD_ORG_NAME
    type: text
    value: ${PROD_ORG_NAME}
  - name: PROD_SPACE_NAME
    type: text
    value: ${PROD_SPACE_NAME}
  - name: PROD_REGION_ID
    type: text
    value: ${PROD_REGION_ID}
  - name: TEST_COMMAND
    type: text
    value: ${TEST_COMMAND}
  - name: GH_API_KEY
    type: text
    value: ${GH_API_KEY}
  jobs:
  - name: Deploy to master
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME}
      api_key: ${API_KEY}
    script: |
      #!/bin/bash
      echo "API_KEY=${API_KEY}"
      echo "PROD_ORG_NAME=${PROD_ORG_NAME}"
      echo "PROD_SPACE_NAME=${PROD_SPACE_NAME}"
      echo "PROD_REGION_ID=${PROD_REGION_ID}"
      region=$(cut -d ':' -f3 <<< "$PROD_REGION_ID")

      echo bx login -a https://cloud.ibm.com --apikey ${API_KEY} -r $region
      bx login -a https://cloud.ibm.com --apikey ${API_KEY} -r $region

      echo bx target -o ${PROD_ORG_NAME} -s ${PROD_SPACE_NAME}
      bx target -o ${PROD_ORG_NAME} -s ${PROD_SPACE_NAME}

      echo bx wsk action invoke /whisk.system/utils/echo -p message hello --blocking --result
      bx wsk action invoke /whisk.system/utils/echo -p message hello --blocking --result
      # now set up your actions etc
      for i in `find actions -type f \( -name "*.js" -or -name "*.py" \)` ; do
        file=`echo $i | cut -d "/" -f 2`
        type=`echo $file | cut -d "." -f 2`
        name=`echo $file | cut -d "." -f 1`
        if [ $type == "js" ] ; then
          kind="nodejs:10"
        else
          kind="python:3"
        fi
        bx wsk action update ${name} --kind $kind $i
      done 
      # check everything is as expected
      bx wsk action list
      
